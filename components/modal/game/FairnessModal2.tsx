import { ModalOverlay } from "../ModalOverlay";
import styles from "./mgame.module.scss";
import WalletIcon from "@/svgs/wallet.svg";
import ExpandIcon from "@/svgs/expanarrow.svg";
import CirckeChecked from "@/svgs/circlecheckmark.svg";
import CrossIcon from "@/svgs/cross.svg";
import CopyIcon from "@/svgs/copy.svg";
import ShieldIcon from "@/svgs/shield.svg";
import Image from "next/image";
import { useSelector } from "react-redux";
import { StateInterface, store } from "mredux";
import { ModalsReducer } from "mredux/reducers/modals.reducer";
import { API_URL, updateCurrentClientSeed } from "@/utils/api.service";
import { imageURI } from "@/utils/colordetector";
import { formatPrice, handleErrorRequest } from "@/utils/handler";
import { UPDATE_MODALS_STATE } from "mredux/types";
import { useEffect, useRef, useState } from "react";
import { toast } from "react-hot-toast";
import { useRouter } from "next/router";
import classNames from "classnames";
import { MainReducer } from "mredux/reducers/main.reducer";
import Loader from "@/components/loader/Loader";

export const FairnessModal2 = () => {
  const refSeed = useRef<HTMLInputElement>(null);
  const refGameId = useRef<HTMLInputElement>(null);
  const refBoxId = useRef<HTMLInputElement>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [errorInput, setErrorInput] = useState<{ type: string; msg: string }>({
    type: "",
    msg: "",
  });

  const router = useRouter();

  const { fairnessModal } = useSelector<StateInterface, ModalsReducer>(
    (state) => state.modalsReducer
  );

  const { user } = useSelector<StateInterface, MainReducer>(
    (state) => state.mainReducer
  );
  const [newClientSeed, setNewClientSeed] = useState<string>(
    user?.seeds?.currentClientSeed || ""
  );

  const updateModalsState = (payload: Partial<ModalsReducer>) => {
    store.dispatch({
      type: UPDATE_MODALS_STATE,
      payload,
    });
  };

  const copyInputContent = (ref: React.RefObject<HTMLInputElement>) => {
    if (ref.current) {
      ref.current.select();
      document.execCommand("copy");
      toast.success("Copied to clipboard");
    }
  };

  const handleChangeCurrentClientSeed = async () => {
    try {
      setLoading(true);
      const res = await updateCurrentClientSeed(newClientSeed);
      if (res && res.seeds?.currentClientSeed) {
        toast.success("Changed client seed");
      }
      setLoading(false);
    } catch (error) {
      console.log({ error });
      setLoading(false);
      handleErrorRequest(error);
    }
  };

  return (
    <ModalOverlay
      isOpened={fairnessModal}
      className={styles.fairModal2}
      onClose={() =>
        updateModalsState({
          fairnessModal: false,
        })
      }
    >
      <div className={styles.header}>
        <div className={styles.headerWrapper}>
          <ShieldIcon />
          <div className={styles.headerTitle}>Provably Fair</div>
        </div>
        <button
          className={styles.closebutton}
          onClick={() =>
            updateModalsState({
              fairnessModal: false,
            })
          }
          // disabled={loading}
        >
          <CrossIcon />
        </button>
      </div>

      <br />

      {(fairnessModal && (
        <div className={styles.content}>
          <div className={styles.paragraphs}>
            <div className={styles.paragraph}>
              For [Game Name], we ensure transparency and fairness in every
              transaction and gameplay. Here's a quick overview of our provably
              fair system for this game:
            </div>
            <div className={styles.paragraph}>
              <strong>Random Number Generation:</strong> Our RNG (Random Number
              Generator) complies with the industry standards for randomness,
              ensuring fair play.
            </div>
            <div className={styles.paragraph}>
              <strong>Game Seed Information:</strong> Each game round is
              determined by two seeds â€“ one generated by the server and one by
              your device. This combination guarantees a unique and unalterable
              game outcome.
            </div>
            <div className={styles.paragraph}>
              <strong>Hash Codes:</strong> Before each round, we provide a hash
              code representing the unplayed game's outcome. After the round,
              you can use this code to verify that the game was fair.
            </div>
            <div className={styles.paragraph}>
              <strong>Audit Trail:</strong> Your bets and game results are
              recorded and can be independently verified for fairness through
              external auditors.
            </div>
          </div>
          <div className={classNames(styles.wrapper, styles.fairness)}>
            <div className={styles.formContainer}>
              <div className={styles.formWrapper}>
                <h2>Current seed pair</h2>
                <div className={styles.formInput}>
                  <div className={styles.label}>
                    <span>Client seed</span>
                    {(errorInput.type === "currentClientSeed" && (
                      <>
                        -<span className={styles.error}>{errorInput.msg}</span>
                      </>
                    )) ||
                      null}
                  </div>
                  <input
                    type="text"
                    className={styles.input}
                    value={newClientSeed}
                    onChange={(e) => {
                      setNewClientSeed(e.target.value);
                      setErrorInput({ type: "", msg: "" });
                    }}
                    placeholder="Enter client seed"
                  />
                  {loading ? (
                    <button>
                      <Loader radius={18} centered />
                    </button>
                  ) : (
                    <button
                      className={styles.seedChangeBtn}
                      onClick={handleChangeCurrentClientSeed}
                    >
                      <span>Change</span>
                    </button>
                  )}
                </div>
                <div className={styles.formInput}>
                  <div className={styles.label}>
                    <span>Server seed (hashed)</span>
                    {(errorInput.type === "currentPrivateSeedHashed" && (
                      <>
                        -<span className={styles.error}>{errorInput.msg}</span>
                      </>
                    )) ||
                      null}
                  </div>
                  <input
                    type="text"
                    value={user?.seeds?.currentPrivateSeedHashed}
                    className={styles.input}
                    onChange={(e) => {
                      setErrorInput({ type: "", msg: "" });
                    }}
                    placeholder="Enter server seed"
                  />
                  {/* <button className={styles.applyButton}>
                    <span>Reveal</span>{" "}
                  </button> */}
                </div>
                <div className={styles.formInput}>
                  <div className={styles.label}>
                    <span>Future server seed (hashed)</span>
                    {(errorInput.type === "future_server_seed" && (
                      <>
                        -<span className={styles.error}>{errorInput.msg}</span>
                      </>
                    )) ||
                      null}
                  </div>
                  <input
                    type="text"
                    className={styles.input}
                    value={user?.seeds?.futurePrivateSeedHashed}
                    onChange={(e) => {
                      setErrorInput({ type: "", msg: "" });
                    }}
                    placeholder="Enter future server seed"
                  />
                </div>
                <div className={styles.formInput}>
                  <div className={styles.label}>
                    <span>Public Seed</span>
                    {(errorInput.type === "currentPublicSeed" && (
                      <>
                        -<span className={styles.error}>{errorInput.msg}</span>
                      </>
                    )) ||
                      null}
                  </div>
                  <input
                    type="text"
                    className={styles.input}
                    value={user?.seeds?.currentPublicSeed}
                    onChange={(e) => {
                      setErrorInput({ type: "", msg: "" });
                    }}
                    placeholder="Enter public seed"
                  />
                </div>
              </div>
              <div className={styles.formWrapper}>
                <h2>Previous seed pair</h2>
                <div className={styles.formInput}>
                  <div className={styles.label}>
                    <span>Client seed</span>
                    {(errorInput.type === "previousClientSeed" && (
                      <>
                        -<span className={styles.error}>{errorInput.msg}</span>
                      </>
                    )) ||
                      null}
                  </div>
                  <input
                    type="text"
                    value={user?.seeds?.previousClientSeed}
                    className={styles.input}
                    onChange={(e) => {
                      setErrorInput({ type: "", msg: "" });
                    }}
                    placeholder="Enter client seed"
                  />
                </div>
                <div className={styles.formInput}>
                  <div className={styles.label}>
                    <span>Server seed</span>
                    {(errorInput.type === "previousPrivateSeed" && (
                      <>
                        -<span className={styles.error}>{errorInput.msg}</span>
                      </>
                    )) ||
                      null}
                  </div>
                  <input
                    type="text"
                    value={user?.seeds?.previousPrivateSeed}
                    className={styles.input}
                    onChange={(e) => {
                      setErrorInput({ type: "", msg: "" });
                    }}
                    placeholder="Enter server seed"
                  />
                </div>
                <div className={styles.formInput}>
                  <div className={styles.label}>
                    <span>Server seed hashed</span>
                    {(errorInput.type === "previousPrivateSeedHashed" && (
                      <>
                        -<span className={styles.error}>{errorInput.msg}</span>
                      </>
                    )) ||
                      null}
                  </div>
                  <input
                    type="text"
                    className={styles.input}
                    value={user?.seeds?.previousPrivateSeedHashed}
                    onChange={(e) => {
                      // setErrorInput({ type: "", msg: "" });
                    }}
                    placeholder="Enter future server seed"
                  />
                </div>
                <div className={styles.formInput}>
                  <div className={styles.label}>
                    <span>Public Seed</span>
                    {(errorInput.type === "previousPublicSeed" && (
                      <>
                        -<span className={styles.error}>{errorInput.msg}</span>
                      </>
                    )) ||
                      null}
                  </div>
                  <input
                    type="text"
                    className={styles.input}
                    value={user?.seeds?.previousPublicSeed}
                    onChange={(e) => {
                      setErrorInput({ type: "", msg: "" });
                    }}
                    placeholder="Enter nonce"
                  />
                </div>
              </div>
            </div>
          </div>
          <button
            onClick={() => {
              updateModalsState({
                fairnessModal: false,
              });
              window.open(
                decodeURIComponent(
                  `https://fairness.loot.gg/game?clientSeed=${user?.seeds?.currentClientSeed}&serverSeed=${user?.seeds?.currentPrivateSeedHashed}&publicSeed=${user?.seeds?.currentPublicSeed}`
                )
              );
            }}
            className={styles.verifyButton}
          >
            Verify Fairness Externally
          </button>
        </div>
      )) ||
        null}
    </ModalOverlay>
  );
};
